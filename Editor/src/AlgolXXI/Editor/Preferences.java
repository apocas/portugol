/*
 * Preferences.java
 *
 * Created on 2 de Maio de 2008, 14:19
 */
package AlgolXXI.Editor;

import AlgolXXI.Editor.CodeEditor.CodeStyle;
import AlgolXXI.Editor.CodeEditor.CodeStyleReader;
import AlgolXXI.Editor.CodeEditor.PortugolStyle;
import AlgolXXI.Editor.CodeEditor.PortugolStyleReader;
import java.awt.Color;

import java.awt.Cursor;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import org.openide.windows.TopComponent;

/**
 * Classe que contém todos os métodos necessários para a escolha das preferências
 * para syntax highlighting. 
 * @author  Saso
 */
public class Preferences extends javax.swing.JFrame {

//    private String codeStyleFilePath = "Algol/src/AlgolXXI/Editor/CodeEditor/codeStyleProfile.xml";
//    private String defaultFile = "Algol/src/AlgolXXI/Editor/CodeEditor/codeStyleDEF.xml";
//    private CodeStyle codestyle;
    
    private SpinnerNumberModel spinnerModel;
    private SpinnerNumberModel spinnerModel1;
    private SpinnerNumberModel spinnerModel2;
    private String codeStyleFilePathF = "Algol/src/AlgolXXI/Editor/CodeEditor/StyleCOST.xml";
    private String defaultFileF = "CodeEditor/StyleCOST.xml";
    
    
    
    
    private PortugolStyle style;

    /** Creates new form Preferences */
    public Preferences() {

//        this.codestyle = CodeStyleReader.getStyle(codeStyleFilePath);
        this.style = PortugolStyleReader.getStyle();
        initComponents();

        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] fonts = ge.getAvailableFontFamilyNames();
        ComboBoxModel model = new DefaultComboBoxModel(fonts);
        ComboBoxModel model1 = new DefaultComboBoxModel(fonts);
        ComboBoxModel model2 = new DefaultComboBoxModel(fonts);

        fontTypes.setModel(model);
        consolaTypes.setModel(model1);
        fluxTypes.setModel(model2);

        spinnerModel = new SpinnerNumberModel();
        spinnerModel.setMinimum(1);
        fontSize.setModel(spinnerModel);
        ((JSpinner.DefaultEditor) fontSize.getEditor()).getTextField().setEditable(false);

        spinnerModel1 = new SpinnerNumberModel();
        spinnerModel1.setMinimum(1);
//        spinnerModel1.setValue(15);
        consolaSize.setModel(spinnerModel1);
        ((JSpinner.DefaultEditor) consolaSize.getEditor()).getTextField().setEditable(false);

        spinnerModel2 = new SpinnerNumberModel();
        spinnerModel2.setMinimum(1);
//        spinnerModel2.setValue(15);
        fluxSize.setModel(spinnerModel2);
        ((JSpinner.DefaultEditor) fluxSize.getEditor()).getTextField().setEditable(false);

        normalPreview.setBackground(new Color(255, 255, 255));
        commentPreview.setBackground(new Color(255, 255, 255));
        quotedPreview.setBackground(new Color(255, 255, 255));
        blockPreview.setBackground(new Color(255, 255, 255));
        typePreview.setBackground(new Color(255, 255, 255));
        lexiconPreview.setBackground(new Color(255, 255, 255));
        valuePreview.setBackground(new Color(255, 255, 255));
        operatorPreview.setBackground(new Color(255, 255, 255));

        consolaPreview2.setBackground(new Color(255, 255, 255));
        fluxPreview.setBackground(new Color(255, 255, 255));

        initMyComponents();
        updateAllPreviews();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btOK = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panel_estilo_codigo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fontTypes = new javax.swing.JComboBox();
        fontSize = new javax.swing.JSpinner();
        lblNormal = new javax.swing.JLabel();
        normalBold = new javax.swing.JCheckBox();
        normalItalic = new javax.swing.JCheckBox();
        lblComment = new javax.swing.JLabel();
        commentBold = new javax.swing.JCheckBox();
        commentItalic = new javax.swing.JCheckBox();
        lblBLock = new javax.swing.JLabel();
        blockItalic = new javax.swing.JCheckBox();
        blockBold = new javax.swing.JCheckBox();
        lblQuoted = new javax.swing.JLabel();
        quotedBold = new javax.swing.JCheckBox();
        quotedItalic = new javax.swing.JCheckBox();
        lblValue = new javax.swing.JLabel();
        operatorBold = new javax.swing.JCheckBox();
        valueItalic = new javax.swing.JCheckBox();
        valueBold = new javax.swing.JCheckBox();
        lblOperator = new javax.swing.JLabel();
        operatorItalic = new javax.swing.JCheckBox();
        lblLexicon = new javax.swing.JLabel();
        lexiconBold = new javax.swing.JCheckBox();
        lexiconItalic = new javax.swing.JCheckBox();
        typeItalic = new javax.swing.JCheckBox();
        typeBold = new javax.swing.JCheckBox();
        lblType = new javax.swing.JLabel();
        commentColor = new javax.swing.JTextField();
        quotedColor = new javax.swing.JTextField();
        blockColor = new javax.swing.JTextField();
        typeColor = new javax.swing.JTextField();
        lexiconColor = new javax.swing.JTextField();
        valueColor = new javax.swing.JTextField();
        operatorColor = new javax.swing.JTextField();
        normalPreview = new javax.swing.JTextField();
        commentPreview = new javax.swing.JTextField();
        quotedPreview = new javax.swing.JTextField();
        blockPreview = new javax.swing.JTextField();
        typePreview = new javax.swing.JTextField();
        lexiconPreview = new javax.swing.JTextField();
        valuePreview = new javax.swing.JTextField();
        operatorPreview = new javax.swing.JTextField();
        normalColor = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        consolaColor3 = new javax.swing.JTextField();
        panel_estilo_fluxograma = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        fluxTypes = new javax.swing.JComboBox();
        fluxSize = new javax.swing.JSpinner();
        fluxBold = new javax.swing.JCheckBox();
        fluxItalic = new javax.swing.JCheckBox();
        fluxColor = new javax.swing.JTextField();
        fluxPreview = new javax.swing.JTextField();
        panel_estilo_consola = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        consolaTypes = new javax.swing.JComboBox();
        consolaSize = new javax.swing.JSpinner();
        consolaBold = new javax.swing.JCheckBox();
        consolaItalic = new javax.swing.JCheckBox();
        consolaColor = new javax.swing.JTextField();
        consolaPreview2 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        consolaPreview = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        consolaColor1 = new javax.swing.JTextField();
        btDefault = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.title")); // NOI18N
        setAlwaysOnTop(true);
        setLocationByPlatform(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        btOK.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.btOK.text")); // NOI18N
        btOK.setPreferredSize(new java.awt.Dimension(100, 23));
        btOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOKActionPerformed(evt);
            }
        });

        btCancel.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.btCancel.text")); // NOI18N
        btCancel.setPreferredSize(new java.awt.Dimension(100, 23));
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.jLabel2.text")); // NOI18N

        fontTypes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        fontTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontTypesActionPerformed(evt);
            }
        });

        fontSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fontSizeStateChanged(evt);
            }
        });

        lblNormal.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.lblNormal.text")); // NOI18N

        normalBold.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.normalBold.text")); // NOI18N
        normalBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalBoldActionPerformed(evt);
            }
        });

        normalItalic.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.normalItalic.text")); // NOI18N
        normalItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalItalicActionPerformed(evt);
            }
        });

        lblComment.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.lblComment.text")); // NOI18N

        commentBold.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.commentBold.text")); // NOI18N
        commentBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commentBoldActionPerformed(evt);
            }
        });

        commentItalic.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.commentItalic.text")); // NOI18N
        commentItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commentItalicActionPerformed(evt);
            }
        });

        lblBLock.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.lblBLock.text")); // NOI18N

        blockItalic.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.blockItalic.text")); // NOI18N
        blockItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockItalicActionPerformed(evt);
            }
        });

        blockBold.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.blockBold.text")); // NOI18N
        blockBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockBoldActionPerformed(evt);
            }
        });

        lblQuoted.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.lblQuoted.text")); // NOI18N

        quotedBold.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.quotedBold.text")); // NOI18N
        quotedBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quotedBoldActionPerformed(evt);
            }
        });

        quotedItalic.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.quotedItalic.text")); // NOI18N
        quotedItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quotedItalicActionPerformed(evt);
            }
        });

        lblValue.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.lblValue.text")); // NOI18N

        operatorBold.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.operatorBold.text")); // NOI18N
        operatorBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operatorBoldActionPerformed(evt);
            }
        });

        valueItalic.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.valueItalic.text")); // NOI18N
        valueItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueItalicActionPerformed(evt);
            }
        });

        valueBold.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.valueBold.text")); // NOI18N
        valueBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueBoldActionPerformed(evt);
            }
        });

        lblOperator.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.lblOperator.text")); // NOI18N

        operatorItalic.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.operatorItalic.text")); // NOI18N
        operatorItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operatorItalicActionPerformed(evt);
            }
        });

        lblLexicon.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.lblLexicon.text")); // NOI18N

        lexiconBold.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.lexiconBold.text")); // NOI18N
        lexiconBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lexiconBoldActionPerformed(evt);
            }
        });

        lexiconItalic.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.lexiconItalic.text")); // NOI18N
        lexiconItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lexiconItalicActionPerformed(evt);
            }
        });

        typeItalic.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.typeItalic.text")); // NOI18N
        typeItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeItalicActionPerformed(evt);
            }
        });

        typeBold.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.typeBold.text")); // NOI18N
        typeBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeBoldActionPerformed(evt);
            }
        });

        lblType.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.lblType.text")); // NOI18N

        commentColor.setEditable(false);
        commentColor.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.commentColor.text")); // NOI18N
        commentColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                commentColorMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                commentColorMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                commentColorMouseExited(evt);
            }
        });

        quotedColor.setEditable(false);
        quotedColor.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.quotedColor.text")); // NOI18N
        quotedColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quotedColorMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                quotedColorMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                quotedColorMouseExited(evt);
            }
        });

        blockColor.setEditable(false);
        blockColor.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.blockColor.text")); // NOI18N
        blockColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                blockColorMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                blockColorMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                blockColorMouseExited(evt);
            }
        });

        typeColor.setEditable(false);
        typeColor.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.typeColor.text")); // NOI18N
        typeColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                typeColorMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                typeColorMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                typeColorMouseExited(evt);
            }
        });

        lexiconColor.setEditable(false);
        lexiconColor.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.lexiconColor.text")); // NOI18N
        lexiconColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lexiconColorMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lexiconColorMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lexiconColorMouseExited(evt);
            }
        });
        lexiconColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lexiconColorActionPerformed(evt);
            }
        });

        valueColor.setEditable(false);
        valueColor.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.valueColor.text")); // NOI18N
        valueColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                valueColorMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                valueColorMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                valueColorMouseExited(evt);
            }
        });

        operatorColor.setEditable(false);
        operatorColor.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.operatorColor.text")); // NOI18N
        operatorColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                operatorColorMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                operatorColorMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                operatorColorMouseExited(evt);
            }
        });

        normalPreview.setEditable(false);
        normalPreview.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        normalPreview.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        normalPreview.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.normalPreview.text")); // NOI18N
        normalPreview.setMaximumSize(new java.awt.Dimension(100, 23));
        normalPreview.setMinimumSize(new java.awt.Dimension(100, 23));
        normalPreview.setPreferredSize(new java.awt.Dimension(100, 23));

        commentPreview.setEditable(false);
        commentPreview.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        commentPreview.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        commentPreview.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.commentPreview.text")); // NOI18N
        commentPreview.setMaximumSize(new java.awt.Dimension(100, 23));
        commentPreview.setMinimumSize(new java.awt.Dimension(100, 23));
        commentPreview.setPreferredSize(new java.awt.Dimension(100, 23));

        quotedPreview.setEditable(false);
        quotedPreview.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        quotedPreview.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        quotedPreview.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.quotedPreview.text")); // NOI18N
        quotedPreview.setMaximumSize(new java.awt.Dimension(100, 23));
        quotedPreview.setMinimumSize(new java.awt.Dimension(100, 23));
        quotedPreview.setPreferredSize(new java.awt.Dimension(100, 23));

        blockPreview.setEditable(false);
        blockPreview.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        blockPreview.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        blockPreview.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.blockPreview.text")); // NOI18N
        blockPreview.setMaximumSize(new java.awt.Dimension(100, 23));
        blockPreview.setMinimumSize(new java.awt.Dimension(100, 23));
        blockPreview.setPreferredSize(new java.awt.Dimension(100, 23));

        typePreview.setEditable(false);
        typePreview.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        typePreview.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        typePreview.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.typePreview.text")); // NOI18N
        typePreview.setMaximumSize(new java.awt.Dimension(100, 23));
        typePreview.setMinimumSize(new java.awt.Dimension(100, 23));
        typePreview.setPreferredSize(new java.awt.Dimension(100, 23));

        lexiconPreview.setEditable(false);
        lexiconPreview.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        lexiconPreview.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lexiconPreview.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.lexiconPreview.text")); // NOI18N
        lexiconPreview.setMaximumSize(new java.awt.Dimension(100, 23));
        lexiconPreview.setMinimumSize(new java.awt.Dimension(100, 23));
        lexiconPreview.setPreferredSize(new java.awt.Dimension(100, 23));

        valuePreview.setEditable(false);
        valuePreview.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        valuePreview.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valuePreview.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.valuePreview.text")); // NOI18N
        valuePreview.setMaximumSize(new java.awt.Dimension(100, 23));
        valuePreview.setMinimumSize(new java.awt.Dimension(100, 23));
        valuePreview.setPreferredSize(new java.awt.Dimension(100, 23));

        operatorPreview.setEditable(false);
        operatorPreview.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        operatorPreview.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        operatorPreview.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.operatorPreview.text")); // NOI18N
        operatorPreview.setMaximumSize(new java.awt.Dimension(100, 23));
        operatorPreview.setMinimumSize(new java.awt.Dimension(100, 23));
        operatorPreview.setPreferredSize(new java.awt.Dimension(100, 23));

        normalColor.setEditable(false);
        normalColor.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.normalColor.text")); // NOI18N
        normalColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                normalColorMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                normalColorMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                normalColorMouseEntered(evt);
            }
        });

        jLabel9.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.jLabel9.text")); // NOI18N

        consolaColor3.setEditable(false);
        consolaColor3.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.consolaColor3.text")); // NOI18N
        consolaColor3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                consolaColor3MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                consolaColor3MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                consolaColor3MouseEntered(evt);
            }
        });
        consolaColor3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consolaColor3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_estilo_codigoLayout = new javax.swing.GroupLayout(panel_estilo_codigo);
        panel_estilo_codigo.setLayout(panel_estilo_codigoLayout);
        panel_estilo_codigoLayout.setHorizontalGroup(
            panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_estilo_codigoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblType)
                    .addComponent(lblLexicon)
                    .addComponent(lblValue)
                    .addComponent(lblOperator)
                    .addComponent(lblBLock)
                    .addComponent(lblComment)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(lblNormal)
                    .addComponent(lblQuoted)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(panel_estilo_codigoLayout.createSequentialGroup()
                            .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(valueBold)
                                .addComponent(operatorBold)
                                .addComponent(lexiconBold)
                                .addComponent(typeBold)
                                .addComponent(blockBold)
                                .addComponent(quotedBold)
                                .addComponent(commentBold)
                                .addComponent(normalBold))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(commentItalic)
                                .addComponent(normalItalic)
                                .addComponent(quotedItalic)
                                .addComponent(blockItalic)
                                .addComponent(typeItalic)
                                .addComponent(lexiconItalic)
                                .addComponent(valueItalic)
                                .addComponent(operatorItalic))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panel_estilo_codigoLayout.createSequentialGroup()
                                    .addComponent(valueColor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(valuePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panel_estilo_codigoLayout.createSequentialGroup()
                                    .addComponent(quotedColor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(quotedPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panel_estilo_codigoLayout.createSequentialGroup()
                                    .addComponent(blockColor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(blockPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panel_estilo_codigoLayout.createSequentialGroup()
                                    .addComponent(typeColor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(typePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panel_estilo_codigoLayout.createSequentialGroup()
                                    .addComponent(lexiconColor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lexiconPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panel_estilo_codigoLayout.createSequentialGroup()
                                    .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(normalColor, javax.swing.GroupLayout.Alignment.LEADING, 0, 1, Short.MAX_VALUE)
                                        .addComponent(commentColor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                                    .addGap(18, 18, 18)
                                    .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(normalPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(commentPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(panel_estilo_codigoLayout.createSequentialGroup()
                                    .addComponent(operatorColor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(operatorPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addComponent(fontTypes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fontSize))
                    .addComponent(consolaColor3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(346, 346, 346))
        );
        panel_estilo_codigoLayout.setVerticalGroup(
            panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_estilo_codigoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fontTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNormal)
                    .addComponent(normalBold)
                    .addComponent(normalItalic)
                    .addComponent(normalColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(normalPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblComment)
                    .addComponent(commentBold)
                    .addComponent(commentItalic)
                    .addComponent(commentColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(commentPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuoted)
                    .addComponent(quotedBold)
                    .addComponent(quotedItalic)
                    .addComponent(quotedColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quotedPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBLock)
                    .addComponent(blockBold)
                    .addComponent(blockItalic)
                    .addComponent(blockColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blockPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblType)
                    .addComponent(typeBold)
                    .addComponent(typeItalic)
                    .addComponent(typeColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLexicon)
                    .addComponent(lexiconBold)
                    .addComponent(lexiconItalic)
                    .addComponent(lexiconColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lexiconPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblValue)
                    .addComponent(valueBold)
                    .addComponent(valueItalic)
                    .addComponent(valueColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valuePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOperator)
                    .addComponent(operatorBold)
                    .addComponent(operatorItalic)
                    .addComponent(operatorColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(operatorPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_estilo_codigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(consolaColor3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.panel_estilo_codigo.TabConstraints.tabTitle"), null, panel_estilo_codigo, org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.panel_estilo_codigo.TabConstraints.tabToolTip")); // NOI18N

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.jLabel5.text")); // NOI18N

        jLabel6.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.jLabel6.text")); // NOI18N

        fluxTypes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        fluxTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fluxTypesActionPerformed(evt);
            }
        });

        fluxSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fluxSizeStateChanged(evt);
            }
        });

        fluxBold.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.fluxBold.text")); // NOI18N
        fluxBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fluxBoldActionPerformed(evt);
            }
        });

        fluxItalic.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.fluxItalic.text")); // NOI18N
        fluxItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fluxItalicActionPerformed(evt);
            }
        });

        fluxColor.setEditable(false);
        fluxColor.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.fluxColor.text")); // NOI18N
        fluxColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fluxColorMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fluxColorMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fluxColorMouseEntered(evt);
            }
        });

        fluxPreview.setEditable(false);
        fluxPreview.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        fluxPreview.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fluxPreview.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.fluxPreview.text")); // NOI18N
        fluxPreview.setMaximumSize(new java.awt.Dimension(100, 23));
        fluxPreview.setMinimumSize(new java.awt.Dimension(100, 23));
        fluxPreview.setPreferredSize(new java.awt.Dimension(100, 23));

        javax.swing.GroupLayout panel_estilo_fluxogramaLayout = new javax.swing.GroupLayout(panel_estilo_fluxograma);
        panel_estilo_fluxograma.setLayout(panel_estilo_fluxogramaLayout);
        panel_estilo_fluxogramaLayout.setHorizontalGroup(
            panel_estilo_fluxogramaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_estilo_fluxogramaLayout.createSequentialGroup()
                .addGroup(panel_estilo_fluxogramaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_estilo_fluxogramaLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(panel_estilo_fluxogramaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(37, 37, 37)
                        .addGroup(panel_estilo_fluxogramaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fluxTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fluxSize, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel_estilo_fluxogramaLayout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(fluxBold)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fluxItalic)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fluxColor, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fluxPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(389, Short.MAX_VALUE))
        );
        panel_estilo_fluxogramaLayout.setVerticalGroup(
            panel_estilo_fluxogramaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_estilo_fluxogramaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_estilo_fluxogramaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(fluxTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_estilo_fluxogramaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(fluxSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_estilo_fluxogramaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fluxPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fluxColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fluxItalic)
                    .addComponent(fluxBold))
                .addContainerGap(291, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.panel_estilo_fluxograma.TabConstraints.tabTitle"), null, panel_estilo_fluxograma, org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.panel_estilo_fluxograma.TabConstraints.tabToolTip")); // NOI18N

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.jLabel3.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.jLabel4.text")); // NOI18N

        consolaTypes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        consolaTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consolaTypesActionPerformed(evt);
            }
        });

        consolaSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                consolaSizeStateChanged(evt);
            }
        });

        consolaBold.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.consolaBold.text")); // NOI18N
        consolaBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consolaBoldActionPerformed(evt);
            }
        });

        consolaItalic.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.consolaItalic.text")); // NOI18N
        consolaItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consolaItalicActionPerformed(evt);
            }
        });

        consolaColor.setEditable(false);
        consolaColor.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.consolaColor.text")); // NOI18N
        consolaColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                consolaColorMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                consolaColorMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                consolaColorMouseEntered(evt);
            }
        });
        consolaColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consolaColorActionPerformed(evt);
            }
        });

        consolaPreview2.setEditable(false);
        consolaPreview2.setBackground(new java.awt.Color(0, 0, 0));
        consolaPreview2.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        consolaPreview2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        consolaPreview2.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.consolaPreview2.text")); // NOI18N
        consolaPreview2.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        consolaPreview2.setMaximumSize(new java.awt.Dimension(100, 23));
        consolaPreview2.setMinimumSize(new java.awt.Dimension(100, 23));
        consolaPreview2.setPreferredSize(new java.awt.Dimension(100, 23));
        consolaPreview2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consolaPreview2ActionPerformed(evt);
            }
        });

        jLabel7.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.jLabel7.text")); // NOI18N

        consolaPreview.setEditable(false);
        consolaPreview.setBackground(new java.awt.Color(0, 0, 0));
        consolaPreview.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        consolaPreview.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        consolaPreview.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.consolaPreview.text")); // NOI18N
        consolaPreview.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        consolaPreview.setMaximumSize(new java.awt.Dimension(100, 23));
        consolaPreview.setMinimumSize(new java.awt.Dimension(100, 23));
        consolaPreview.setPreferredSize(new java.awt.Dimension(100, 23));
        consolaPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consolaPreviewActionPerformed(evt);
            }
        });

        jLabel8.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.jLabel8.text")); // NOI18N

        consolaColor1.setEditable(false);
        consolaColor1.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.consolaColor1.text")); // NOI18N
        consolaColor1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                consolaColor1MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                consolaColor1MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                consolaColor1MouseEntered(evt);
            }
        });
        consolaColor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consolaColor1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_estilo_consolaLayout = new javax.swing.GroupLayout(panel_estilo_consola);
        panel_estilo_consola.setLayout(panel_estilo_consolaLayout);
        panel_estilo_consolaLayout.setHorizontalGroup(
            panel_estilo_consolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_estilo_consolaLayout.createSequentialGroup()
                .addGroup(panel_estilo_consolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_estilo_consolaLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(panel_estilo_consolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(panel_estilo_consolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(consolaTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(consolaSize, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panel_estilo_consolaLayout.createSequentialGroup()
                                .addComponent(consolaBold)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(consolaItalic))))
                    .addGroup(panel_estilo_consolaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panel_estilo_consolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_estilo_consolaLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(consolaColor, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(consolaPreview2, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(consolaPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panel_estilo_consolaLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(consolaColor1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(389, Short.MAX_VALUE))
        );
        panel_estilo_consolaLayout.setVerticalGroup(
            panel_estilo_consolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_estilo_consolaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_estilo_consolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(consolaTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_estilo_consolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(consolaSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_estilo_consolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consolaItalic)
                    .addComponent(consolaBold))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_estilo_consolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(consolaColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(consolaPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panel_estilo_consolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(consolaColor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(consolaPreview2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(125, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.panel_estilo_consola.TabConstraints.tabTitle"), null, panel_estilo_consola, org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.panel_estilo_consola.TabConstraints.tabToolTip")); // NOI18N

        btDefault.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.btDefault.text")); // NOI18N
        btDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDefaultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btDefault, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(108, 108, 108)
                        .addComponent(btCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btOK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(100, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btCancel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btOK, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btDefault))
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(Preferences.class, "Options.jTabbedPane1.AccessibleContext.accessibleName")); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
    this.dispose();
}//GEN-LAST:event_btCancelActionPerformed

private void lexiconColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lexiconColorActionPerformed
}//GEN-LAST:event_lexiconColorActionPerformed

private void btDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDefaultActionPerformed
    String[] options = {"Sim", "Não"};
    int n = JOptionPane.showOptionDialog(this, "Tem a certeza que quer reverter às definições por defeito?", "", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
    if (n == 0) {
        this.style = PortugolStyleReader.getStyle();
        initMyComponents();
        updateAllPreviews();
    }
}//GEN-LAST:event_btDefaultActionPerformed

private void fontSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fontSizeStateChanged
    updateAllPreviews();
}//GEN-LAST:event_fontSizeStateChanged

private void fontTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontTypesActionPerformed
    updateAllPreviews();
}//GEN-LAST:event_fontTypesActionPerformed

private void normalBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalBoldActionPerformed
    updateNormalPreview();
}//GEN-LAST:event_normalBoldActionPerformed

private void normalItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalItalicActionPerformed
    updateNormalPreview();
}//GEN-LAST:event_normalItalicActionPerformed

private void commentBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commentBoldActionPerformed
    updateCommentPreview();
}//GEN-LAST:event_commentBoldActionPerformed

private void commentItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commentItalicActionPerformed
    updateCommentPreview();
}//GEN-LAST:event_commentItalicActionPerformed

private void quotedBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quotedBoldActionPerformed
    updateQuotedPreview();
}//GEN-LAST:event_quotedBoldActionPerformed

private void quotedItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quotedItalicActionPerformed
    updateQuotedPreview();
}//GEN-LAST:event_quotedItalicActionPerformed

private void blockBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockBoldActionPerformed
    updateBlockPreview();
}//GEN-LAST:event_blockBoldActionPerformed

private void blockItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockItalicActionPerformed
    updateBlockPreview();
}//GEN-LAST:event_blockItalicActionPerformed

private void typeBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeBoldActionPerformed
    updateTypePreview();
}//GEN-LAST:event_typeBoldActionPerformed

private void typeItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeItalicActionPerformed
    updateTypePreview();
}//GEN-LAST:event_typeItalicActionPerformed

private void lexiconBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lexiconBoldActionPerformed
    updateLexiconPreview();
}//GEN-LAST:event_lexiconBoldActionPerformed

private void lexiconItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lexiconItalicActionPerformed
    updateLexiconPreview();
}//GEN-LAST:event_lexiconItalicActionPerformed

private void valueBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueBoldActionPerformed
    updateValuePreview();
}//GEN-LAST:event_valueBoldActionPerformed

private void valueItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueItalicActionPerformed
    updateValuePreview();
}//GEN-LAST:event_valueItalicActionPerformed

private void operatorBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operatorBoldActionPerformed
    updateOperatorPreview();
}//GEN-LAST:event_operatorBoldActionPerformed

private void operatorItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operatorItalicActionPerformed
    updateOperatorPreview();
}//GEN-LAST:event_operatorItalicActionPerformed

private void normalColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_normalColorMouseClicked
    Color newColor = JColorChooser.showDialog(this, "Escolha a nova cor", normalColor.getBackground());
    if (newColor != null) {
        normalColor.setBackground(newColor);
        updateNormalPreview();
    }
}//GEN-LAST:event_normalColorMouseClicked

private void commentColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_commentColorMouseClicked
    Color newColor = JColorChooser.showDialog(this, "Escolha a nova cor", commentColor.getBackground());
    if (newColor != null) {
        commentColor.setBackground(newColor);
        updateCommentPreview();
    }
}//GEN-LAST:event_commentColorMouseClicked

private void quotedColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quotedColorMouseClicked
    Color newColor = JColorChooser.showDialog(this, "Escolha a nova cor", quotedColor.getBackground());
    if (newColor != null) {
        quotedColor.setBackground(newColor);
        updateQuotedPreview();
    }
}//GEN-LAST:event_quotedColorMouseClicked

private void blockColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blockColorMouseClicked
    Color newColor = JColorChooser.showDialog(this, "Escolha a nova cor", blockColor.getBackground());
    if (newColor != null) {
        blockColor.setBackground(newColor);
        updateBlockPreview();
    }
}//GEN-LAST:event_blockColorMouseClicked

private void typeColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeColorMouseClicked
    Color newColor = JColorChooser.showDialog(this, "Escolha a nova cor", typeColor.getBackground());
    if (newColor != null) {
        typeColor.setBackground(newColor);
        updateTypePreview();
    }
}//GEN-LAST:event_typeColorMouseClicked

private void lexiconColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lexiconColorMouseClicked
    Color newColor = JColorChooser.showDialog(this, "Escolha a nova cor", lexiconColor.getBackground());
    if (newColor != null) {
        lexiconColor.setBackground(newColor);
        updateLexiconPreview();
    }
}//GEN-LAST:event_lexiconColorMouseClicked

private void valueColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_valueColorMouseClicked
    Color newColor = JColorChooser.showDialog(this, "Escolha a nova cor", valueColor.getBackground());
    if (newColor != null) {
        valueColor.setBackground(newColor);
        updateValuePreview();
    }
}//GEN-LAST:event_valueColorMouseClicked

private void operatorColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_operatorColorMouseClicked
    Color newColor = JColorChooser.showDialog(this, "Escolha a nova cor", operatorColor.getBackground());
    if (newColor != null) {
        operatorColor.setBackground(newColor);
        updateOperatorPreview();
    }
}//GEN-LAST:event_operatorColorMouseClicked

private void btOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOKActionPerformed

    style.setCodeBackground(consolaColor3.getBackground());
    
    style.setFontFamily((String) fontTypes.getSelectedItem());
    style.setFontSize((Integer) fontSize.getValue());

    style.getNormalStyle().setBold(normalBold.isSelected());
    style.getNormalStyle().setItalic(normalItalic.isSelected());
    style.getNormalStyle().setColor(normalColor.getBackground());

    style.getCommentStyle().setBold(commentBold.isSelected());
    style.getCommentStyle().setItalic(commentItalic.isSelected());
    style.getCommentStyle().setColor(commentColor.getBackground());

    style.getStringStyle().setBold(quotedBold.isSelected());
    style.getStringStyle().setItalic(quotedItalic.isSelected());
    style.getStringStyle().setColor(quotedColor.getBackground());

    style.getBlockStyle().setBold(blockBold.isSelected());
    style.getBlockStyle().setItalic(blockItalic.isSelected());
    style.getBlockStyle().setColor(blockColor.getBackground());

    style.getTypeStyle().setBold(typeBold.isSelected());
    style.getTypeStyle().setItalic(typeItalic.isSelected());
    style.getTypeStyle().setColor(typeColor.getBackground());

    style.getLexiconStyle().setBold(lexiconBold.isSelected());
    style.getLexiconStyle().setItalic(lexiconItalic.isSelected());
    style.getLexiconStyle().setColor(lexiconColor.getBackground());

    style.getValueStyle().setBold(valueBold.isSelected());
    style.getValueStyle().setItalic(valueItalic.isSelected());
    style.getValueStyle().setColor(valueColor.getBackground());

    style.getOperatorStyle().setBold(operatorBold.isSelected());
    style.getOperatorStyle().setItalic(operatorItalic.isSelected());
    style.getOperatorStyle().setColor(operatorColor.getBackground());

    style.setConsfontFamily((String) consolaTypes.getSelectedItem());
    style.setConsfontSize((Integer) consolaSize.getValue());
    style.setConsBold("" + consolaBold.isSelected());
    style.setConsColor(consolaColor.getBackground());
    style.setConsBackgroundColor(consolaColor.getBackground());
    style.setConsTextColor(consolaColor1.getBackground());
    style.setConsItalic("" + consolaItalic.isSelected());

    style.setFluxfontFamily((String) fluxTypes.getSelectedItem());
    style.setFluxfontSize((Integer) fluxSize.getValue());
    style.setFluxBold("" + fluxBold.isSelected());
    style.setFluxItalic("" + fluxItalic.isSelected());
    
            System.out.println(style.getFluxfontFamily());
        System.out.println(style.getFluxfontSize());
        System.out.println(style.isFluxBold());
        System.out.println(style.isFluxItalic());

    style.writeToFile(codeStyleFilePathF);

    int fonte = Font.PLAIN;
    if (style.isConsBold() && !style.isConsItalic()) {
        fonte = Font.BOLD;
    } else if (!style.isConsBold() && style.isConsItalic()) {
        fonte = Font.ITALIC;
    } else if (style.isConsBold() && style.isConsItalic()) {
        fonte = Font.ITALIC + Font.BOLD;
    } else if (!style.isConsBold() && !style.isConsItalic()) {
        fonte = Font.PLAIN;
    }

    int fontef = Font.PLAIN;
    if (style.isFluxBold() && !style.isFluxItalic()) {
        fontef = Font.BOLD;
    } else if (!style.isFluxBold() && style.isFluxItalic()) {
        fontef = Font.ITALIC;
    } else if (style.isFluxBold() && style.isFluxItalic()) {
        fontef = Font.ITALIC + Font.BOLD;
    } else if (!style.isFluxBold() && !style.isFluxItalic()) {
        fontef = Font.PLAIN;
    }

    int n = TopComponent.getRegistry().getOpened().toArray().length;

    for (int i = 0; i < n; i++) {
        if (TopComponent.getRegistry().getOpened().toArray()[i] instanceof ProgramaTopComponent) {
            ((ProgramaTopComponent) TopComponent.getRegistry().getOpened().toArray()[i]).newColoringSettings(style);
            ((ProgramaTopComponent) TopComponent.getRegistry().getOpened().toArray()[i]).setFontFluxogramas(new Font(style.getFluxfontFamily(), fontef, style.getFluxfontSize()));
            ((ProgramaTopComponent) TopComponent.getRegistry().getOpened().toArray()[i]).setFontConsola(new Font(style.getConsfontFamily(), fonte, style.getConsfontSize()));
            ((ProgramaTopComponent) TopComponent.getRegistry().getOpened().toArray()[i]).setColorConsola(style.getConsBackgroundColor(),style.getConsTextColor());
            ((ProgramaTopComponent) TopComponent.getRegistry().getOpened().toArray()[i]).setColorCodigo(style.getCodeBackground());
        }
    }

    this.dispose();

}//GEN-LAST:event_btOKActionPerformed

private void normalColorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_normalColorMouseEntered
    setCursor(new Cursor(Cursor.HAND_CURSOR));
}//GEN-LAST:event_normalColorMouseEntered

private void normalColorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_normalColorMouseExited
    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_normalColorMouseExited

private void commentColorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_commentColorMouseEntered
    setCursor(new Cursor(Cursor.HAND_CURSOR));
}//GEN-LAST:event_commentColorMouseEntered

private void quotedColorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quotedColorMouseEntered
    setCursor(new Cursor(Cursor.HAND_CURSOR));
}//GEN-LAST:event_quotedColorMouseEntered

private void blockColorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blockColorMouseEntered
    setCursor(new Cursor(Cursor.HAND_CURSOR));
}//GEN-LAST:event_blockColorMouseEntered

private void typeColorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeColorMouseEntered
    setCursor(new Cursor(Cursor.HAND_CURSOR));
}//GEN-LAST:event_typeColorMouseEntered

private void lexiconColorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lexiconColorMouseEntered
    setCursor(new Cursor(Cursor.HAND_CURSOR));
}//GEN-LAST:event_lexiconColorMouseEntered

private void valueColorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_valueColorMouseEntered
    setCursor(new Cursor(Cursor.HAND_CURSOR));
}//GEN-LAST:event_valueColorMouseEntered

private void operatorColorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_operatorColorMouseEntered
    setCursor(new Cursor(Cursor.HAND_CURSOR));
}//GEN-LAST:event_operatorColorMouseEntered

private void commentColorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_commentColorMouseExited
    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_commentColorMouseExited

private void quotedColorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quotedColorMouseExited
    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_quotedColorMouseExited

private void blockColorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blockColorMouseExited
    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_blockColorMouseExited

private void typeColorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeColorMouseExited
    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_typeColorMouseExited

private void lexiconColorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lexiconColorMouseExited
    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_lexiconColorMouseExited

private void valueColorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_valueColorMouseExited
    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_valueColorMouseExited

private void operatorColorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_operatorColorMouseExited
    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_operatorColorMouseExited

private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    AlgolXXI.Editor.Utils.EditorUtils.setDialogOpened(false);
}//GEN-LAST:event_formWindowClosed

private void consolaTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consolaTypesActionPerformed
    updateAllPreviews();
}//GEN-LAST:event_consolaTypesActionPerformed

private void consolaSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_consolaSizeStateChanged
    updateAllPreviews();
}//GEN-LAST:event_consolaSizeStateChanged

private void consolaBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consolaBoldActionPerformed
    updateConsolaPreview();
}//GEN-LAST:event_consolaBoldActionPerformed

private void consolaItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consolaItalicActionPerformed
    updateConsolaPreview();
}//GEN-LAST:event_consolaItalicActionPerformed

private void consolaColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consolaColorMouseClicked
    Color newColor = JColorChooser.showDialog(this, "Escolha a nova cor", consolaColor.getBackground());
    if (newColor != null) {
        consolaColor.setBackground(newColor);
        updateConsolaPreview();
    }
}//GEN-LAST:event_consolaColorMouseClicked

private void consolaColorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consolaColorMouseEntered
    setCursor(new Cursor(Cursor.HAND_CURSOR));
}//GEN-LAST:event_consolaColorMouseEntered

private void consolaColorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consolaColorMouseExited
    setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_consolaColorMouseExited

private void fluxTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fluxTypesActionPerformed
updateAllPreviews();
}//GEN-LAST:event_fluxTypesActionPerformed

private void fluxSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fluxSizeStateChanged
updateAllPreviews();
}//GEN-LAST:event_fluxSizeStateChanged

private void fluxBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fluxBoldActionPerformed
updateAllPreviews();
}//GEN-LAST:event_fluxBoldActionPerformed

private void fluxItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fluxItalicActionPerformed
updateAllPreviews();
}//GEN-LAST:event_fluxItalicActionPerformed

private void fluxColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fluxColorMouseClicked
Color newColor = JColorChooser.showDialog(this, "Escolha a nova cor", fluxColor.getBackground());
    if (newColor != null) {
        fluxColor.setBackground(newColor);
        updateFluxPreview();
    }
}//GEN-LAST:event_fluxColorMouseClicked

private void fluxColorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fluxColorMouseEntered
setCursor(new Cursor(Cursor.HAND_CURSOR));
}//GEN-LAST:event_fluxColorMouseEntered

private void fluxColorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fluxColorMouseExited
setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
}//GEN-LAST:event_fluxColorMouseExited

    private void consolaPreview2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consolaPreview2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_consolaPreview2ActionPerformed

    private void consolaColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consolaColorActionPerformed

    }//GEN-LAST:event_consolaColorActionPerformed

    private void consolaPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consolaPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_consolaPreviewActionPerformed

    private void consolaColor1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consolaColor1MouseClicked
       Color newColor = JColorChooser.showDialog(this, "Escolha a nova cor", consolaColor.getBackground());
    if (newColor != null) {
        consolaColor1.setBackground(newColor);
        updateConsolaPreview2();
    }
    }//GEN-LAST:event_consolaColor1MouseClicked

    private void consolaColor1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consolaColor1MouseExited
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_consolaColor1MouseExited

    private void consolaColor1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consolaColor1MouseEntered
        setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_consolaColor1MouseEntered

    private void consolaColor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consolaColor1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_consolaColor1ActionPerformed

    private void consolaColor3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consolaColor3MouseClicked
       Color newColor = JColorChooser.showDialog(this, "Escolha a nova cor", consolaColor.getBackground());
    if (newColor != null) {
        consolaColor3.setBackground(newColor);
    }
    }//GEN-LAST:event_consolaColor3MouseClicked

    private void consolaColor3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consolaColor3MouseExited
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_consolaColor3MouseExited

    private void consolaColor3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consolaColor3MouseEntered
        setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_consolaColor3MouseEntered

    private void consolaColor3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consolaColor3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_consolaColor3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox blockBold;
    private javax.swing.JTextField blockColor;
    private javax.swing.JCheckBox blockItalic;
    private javax.swing.JTextField blockPreview;
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btDefault;
    private javax.swing.JButton btOK;
    private javax.swing.JCheckBox commentBold;
    private javax.swing.JTextField commentColor;
    private javax.swing.JCheckBox commentItalic;
    private javax.swing.JTextField commentPreview;
    private javax.swing.JCheckBox consolaBold;
    private javax.swing.JTextField consolaColor;
    private javax.swing.JTextField consolaColor1;
    private javax.swing.JTextField consolaColor3;
    private javax.swing.JCheckBox consolaItalic;
    private javax.swing.JTextField consolaPreview;
    private javax.swing.JTextField consolaPreview2;
    private javax.swing.JSpinner consolaSize;
    private javax.swing.JComboBox consolaTypes;
    private javax.swing.JCheckBox fluxBold;
    private javax.swing.JTextField fluxColor;
    private javax.swing.JCheckBox fluxItalic;
    private javax.swing.JTextField fluxPreview;
    private javax.swing.JSpinner fluxSize;
    private javax.swing.JComboBox fluxTypes;
    private javax.swing.JSpinner fontSize;
    private javax.swing.JComboBox fontTypes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblBLock;
    private javax.swing.JLabel lblComment;
    private javax.swing.JLabel lblLexicon;
    private javax.swing.JLabel lblNormal;
    private javax.swing.JLabel lblOperator;
    private javax.swing.JLabel lblQuoted;
    private javax.swing.JLabel lblType;
    private javax.swing.JLabel lblValue;
    private javax.swing.JCheckBox lexiconBold;
    private javax.swing.JTextField lexiconColor;
    private javax.swing.JCheckBox lexiconItalic;
    private javax.swing.JTextField lexiconPreview;
    private javax.swing.JCheckBox normalBold;
    private javax.swing.JTextField normalColor;
    private javax.swing.JCheckBox normalItalic;
    private javax.swing.JTextField normalPreview;
    private javax.swing.JCheckBox operatorBold;
    private javax.swing.JTextField operatorColor;
    private javax.swing.JCheckBox operatorItalic;
    private javax.swing.JTextField operatorPreview;
    private javax.swing.JPanel panel_estilo_codigo;
    private javax.swing.JPanel panel_estilo_consola;
    private javax.swing.JPanel panel_estilo_fluxograma;
    private javax.swing.JCheckBox quotedBold;
    private javax.swing.JTextField quotedColor;
    private javax.swing.JCheckBox quotedItalic;
    private javax.swing.JTextField quotedPreview;
    private javax.swing.JCheckBox typeBold;
    private javax.swing.JTextField typeColor;
    private javax.swing.JCheckBox typeItalic;
    private javax.swing.JTextField typePreview;
    private javax.swing.JCheckBox valueBold;
    private javax.swing.JTextField valueColor;
    private javax.swing.JCheckBox valueItalic;
    private javax.swing.JTextField valuePreview;
    // End of variables declaration//GEN-END:variables

    private void initMyComponents() {

        fontTypes.setSelectedItem(style.getFontFamily());

        spinnerModel.setValue(style.getFontSize());

        normalBold.setSelected(style.getNormalStyle().isBold());
        normalItalic.setSelected(style.getNormalStyle().isItalic());
        normalColor.setBackground(style.getNormalStyle().getColor());

        commentBold.setSelected(style.getCommentStyle().isBold());
        commentItalic.setSelected(style.getCommentStyle().isItalic());
        commentColor.setBackground(style.getCommentStyle().getColor());

        quotedBold.setSelected(style.getStringStyle().isBold());
        quotedItalic.setSelected(style.getStringStyle().isItalic());
        quotedColor.setBackground(style.getStringStyle().getColor());

        blockBold.setSelected(style.getBlockStyle().isBold());
        blockItalic.setSelected(style.getBlockStyle().isItalic());
        blockColor.setBackground(style.getBlockStyle().getColor());

        typeBold.setSelected(style.getTypeStyle().isBold());
        typeItalic.setSelected(style.getTypeStyle().isItalic());
        typeColor.setBackground(style.getTypeStyle().getColor());

        lexiconBold.setSelected(style.getLexiconStyle().isBold());
        lexiconItalic.setSelected(style.getLexiconStyle().isItalic());
        lexiconColor.setBackground(style.getLexiconStyle().getColor());

        valueBold.setSelected(style.getValueStyle().isBold());
        valueItalic.setSelected(style.getValueStyle().isItalic());
        valueColor.setBackground(style.getValueStyle().getColor());

        operatorBold.setSelected(style.getOperatorStyle().isBold());
        operatorItalic.setSelected(style.getOperatorStyle().isItalic());
        operatorColor.setBackground(style.getOperatorStyle().getColor());

//        consolaBold.setSelected(false);
//        consolaItalic.setSelected(false);
        consolaColor.setBackground(Color.BLACK);
        fluxColor.setBackground(Color.BLACK);

        consolaTypes.setSelectedItem(style.getConsfontFamily());
        consolaSize.setValue(style.getConsfontSize());
        consolaBold.setSelected(style.isConsBold());
        consolaItalic.setSelected(style.isConsItalic());
        
        fluxTypes.setSelectedItem(style.getFluxfontFamily());
        fluxSize.setValue(style.getFluxfontSize());
        fluxBold.setSelected(style.isFluxBold());
        fluxItalic.setSelected(style.isFluxItalic());
    }

    private void updateAllPreviews() {
        updateNormalPreview();
        updateCommentPreview();
        updateQuotedPreview();
        updateBlockPreview();
        updateTypePreview();
        updateLexiconPreview();
        updateValuePreview();
        updateOperatorPreview();
        updateConsolaPreview();
        updateConsolaPreview2();
        updateFluxPreview();
    }

    private void updateBlockPreview() {
        String fType = (String) fontTypes.getSelectedItem();
        int fSize = (Integer) fontSize.getValue();

        Font font = new Font(fType, Font.PLAIN, fSize);
        if (blockBold.isSelected() && !blockItalic.isSelected()) {
            font = font.deriveFont(Font.BOLD);
        } else if (!blockBold.isSelected() && blockItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC);
        } else if (blockBold.isSelected() && blockItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC + Font.BOLD);
        }
        blockPreview.setFont(font);
        blockPreview.setForeground(blockColor.getBackground());
    }

    private void updateCommentPreview() {
        String fType = (String) fontTypes.getSelectedItem();
        int fSize = (Integer) fontSize.getValue();

        Font font = new Font(fType, Font.PLAIN, fSize);
        if (commentBold.isSelected() && !commentItalic.isSelected()) {
            font = font.deriveFont(Font.BOLD);
        } else if (!commentBold.isSelected() && commentItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC);
        } else if (commentBold.isSelected() && commentItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC + Font.BOLD);
        }
        commentPreview.setFont(font);
        commentPreview.setForeground(commentColor.getBackground());
    }

    private void updateLexiconPreview() {
        String fType = (String) fontTypes.getSelectedItem();
        int fSize = (Integer) fontSize.getValue();

        Font font = new Font(fType, Font.PLAIN, fSize);
        if (lexiconBold.isSelected() && !lexiconItalic.isSelected()) {
            font = font.deriveFont(Font.BOLD);
        } else if (!lexiconBold.isSelected() && lexiconItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC);
        } else if (lexiconBold.isSelected() && lexiconItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC + Font.BOLD);
        }
        lexiconPreview.setFont(font);
        lexiconPreview.setForeground(lexiconColor.getBackground());
    }

    private void updateNormalPreview() {
        String fType = (String) fontTypes.getSelectedItem();
        int fSize = (Integer) fontSize.getValue();

        Font font = new Font(fType, Font.PLAIN, fSize);
        if (normalBold.isSelected() && !normalItalic.isSelected()) {
            font = font.deriveFont(Font.BOLD);
        } else if (!normalBold.isSelected() && normalItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC);
        } else if (normalBold.isSelected() && normalItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC + Font.BOLD);
        }
        normalPreview.setFont(font);
        normalPreview.setForeground(normalColor.getBackground());
    }

    private void updateOperatorPreview() {
        String fType = (String) fontTypes.getSelectedItem();
        int fSize = (Integer) fontSize.getValue();

        Font font = new Font(fType, Font.PLAIN, fSize);
        if (operatorBold.isSelected() && !operatorItalic.isSelected()) {
            font = font.deriveFont(Font.BOLD);
        } else if (!operatorBold.isSelected() && operatorItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC);
        } else if (operatorBold.isSelected() && operatorItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC + Font.BOLD);
        }
        operatorPreview.setFont(font);
        operatorPreview.setForeground(operatorColor.getBackground());
    }

    private void updateQuotedPreview() {
        String fType = (String) fontTypes.getSelectedItem();
        int fSize = (Integer) fontSize.getValue();

        Font font = new Font(fType, Font.PLAIN, fSize);
        if (quotedBold.isSelected() && !quotedItalic.isSelected()) {
            font = font.deriveFont(Font.BOLD);
        } else if (!quotedBold.isSelected() && quotedItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC);
        } else if (quotedBold.isSelected() && quotedItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC + Font.BOLD);
        }
        quotedPreview.setFont(font);
        quotedPreview.setForeground(quotedColor.getBackground());
    }

    private void updateTypePreview() {
        String fType = (String) fontTypes.getSelectedItem();
        int fSize = (Integer) fontSize.getValue();

        Font font = new Font(fType, Font.PLAIN, fSize);
        if (typeBold.isSelected() && !typeItalic.isSelected()) {
            font = font.deriveFont(Font.BOLD);
        } else if (!typeBold.isSelected() && typeItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC);
        } else if (typeBold.isSelected() && typeItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC + Font.BOLD);
        }
        typePreview.setFont(font);
        typePreview.setForeground(typeColor.getBackground());
    }

    private void updateValuePreview() {
        String fType = (String) fontTypes.getSelectedItem();
        int fSize = (Integer) fontSize.getValue();

        Font font = new Font(fType, Font.PLAIN, fSize);
        if (valueBold.isSelected() && !valueItalic.isSelected()) {
            font = font.deriveFont(Font.BOLD);
        } else if (!valueBold.isSelected() && valueItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC);
        } else if (valueBold.isSelected() && valueItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC + Font.BOLD);
        }
        valuePreview.setFont(font);
        valuePreview.setForeground(valueColor.getBackground());
    }

    private void updateConsolaPreview() {
        String fType = (String) consolaTypes.getSelectedItem();
        int fSize = (Integer) consolaSize.getValue();

        Font font = new Font(fType, Font.PLAIN, fSize);
        if (consolaBold.isSelected() && !consolaItalic.isSelected()) {
            font = font.deriveFont(Font.BOLD);
        } else if (!consolaBold.isSelected() && consolaItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC);
        } else if (consolaBold.isSelected() && consolaItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC + Font.BOLD);
        }
        consolaPreview.setFont(font);
        consolaPreview.setBackground(consolaColor.getBackground());
    }
    
    private void updateFluxPreview() {
        String fType = (String) fluxTypes.getSelectedItem();
        int fSize = (Integer) fluxSize.getValue();

        Font font = new Font(fType, Font.PLAIN, fSize);
        if (consolaBold.isSelected() && !consolaItalic.isSelected()) {
            font = font.deriveFont(Font.BOLD);
        } else if (!consolaBold.isSelected() && consolaItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC);
        } else if (consolaBold.isSelected() && consolaItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC + Font.BOLD);
        }
        fluxPreview.setFont(font);
        fluxPreview.setForeground(fluxColor.getBackground());
    }

    private void updateConsolaPreview2() {
         String fType = (String) consolaTypes.getSelectedItem();
        int fSize = (Integer) consolaSize.getValue();

        Font font = new Font(fType, Font.PLAIN, fSize);
        if (consolaBold.isSelected() && !consolaItalic.isSelected()) {
            font = font.deriveFont(Font.BOLD);
        } else if (!consolaBold.isSelected() && consolaItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC);
        } else if (consolaBold.isSelected() && consolaItalic.isSelected()) {
            font = font.deriveFont(Font.ITALIC + Font.BOLD);
        }
        consolaPreview2.setFont(font);
        consolaPreview2.setForeground(consolaColor1.getBackground());    
    }
}
